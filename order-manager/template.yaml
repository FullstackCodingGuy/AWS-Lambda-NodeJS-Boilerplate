AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:

  Function:
    Timeout: 3

Parameters:

  HOSTINGENV:
    Type: String
    Description: "Ex: Development, Staging, Production"
    Default: "Production"

Resources:
  OrderApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: OrderServiceAPI
      StageName: v1

  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue

  OrderCache:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1

  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/createOrder.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaSQSQueueExecutionRole
        - AWSLambdaBasicExecutionRole
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongodb/credentials-*"
      Environment:
        Variables:
          HOSTING_ENV: !Ref HOSTINGENV
          DB_URI: ""
          REDIS_HOST: !GetAtt OrderCache.RedisEndpoint.Address
          SQS_URL: !Ref OrderQueue
          MONGODB_SECRET_ARN: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongodb/credentials"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders
            Method: post
            RestApiId: !Ref OrderApi

  ProcessQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/processQueue.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      Policies:
        - AWSLambdaSQSQueueExecutionRole
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OrderQueue.Arn
            BatchSize: 5
