AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 10

Parameters:
  HOSTINGENV:
    Type: String
    Description: "Ex: Development, Staging, Production"
    Default: "Production"

  # VpcId:
  #   Type: AWS::EC2::VPC::Id
  #   Description: "The VPC ID where resources will be created"
  # SubnetIds:
  #   Type: List<AWS::EC2::Subnet::Id>
  #   Description: "The subnet IDs within the VPC"
  # SecurityGroupIds:
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  #   Description: "The security group IDs within the VPC"

Resources:
  OrderApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: OrderServiceAPI
      StageName: v1
      Tags:
        AppGroup: OrdersLambda
        AppType: Serverless

  # OrderQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: OrderQueue

  DynamoDBOrdersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: OrdersTable
      Tags:
        AppGroup: OrdersLambda
        AppType: Serverless


  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/createOrder.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              !Ref DynamoDBOrdersTable
        - AWSLambdaVPCAccessExecutionRole
        - AmazonDynamoDBFullAccess
        - AWSLambdaSQSQueueExecutionRole
        - AWSLambdaBasicExecutionRole
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongodb/credentials-*"
      Environment:
        Variables:
          HOSTING_ENV: !Ref HOSTINGENV
          DB_URI: ""
          # REDIS_HOST: ""
          # SQS_URL: !Ref OrderQueue
          # MONGODB_SECRET_ARN: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongodb/credentials"
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref SubnetIds
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /orders
            Method: post
            RestApiId: !Ref OrderApi
      Tags:
        AppGroup: OrdersLambda
        AppType: Serverless

  GetMyOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/getMyOrders.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              !Ref DynamoDBOrdersTable
        - AWSLambdaVPCAccessExecutionRole
        - AmazonDynamoDBFullAccess
        - AWSLambdaSQSQueueExecutionRole
        - AWSLambdaBasicExecutionRole
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mongodb/credentials-*"
      Environment:
        Variables:
          HOSTING_ENV: !Ref HOSTINGENV
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /myorders
            Method: get
            RestApiId: !Ref OrderApi

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  OrderApi:
    Description: "API Gateway endpoint URL for Prod stage for Create Order function"
    Value: !Sub "https://${OrderApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/orders"
  CreateOrderFunction:
    Description: "Create Order Lambda Function ARN"
    Value: !GetAtt CreateOrderFunction.Arn
